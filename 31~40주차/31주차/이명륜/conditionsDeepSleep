import java.io.*;
import java.util.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st = new StringTokenizer("");

    public static void main(String[] args) throws IOException {

        //dp[idx][value-1] 까지 모두 0으로 만들고 현재 idx에선 value값을 가질 최소의 연산 횟수라 하면 되려나..
        //dp[idx][현재 인덱스의 전구 상태::value] = 최소 횟수 .. value =0 || value =1
        // 아니다 xxxxxxxxxxxxxxxxxxxxxx

        //dp 같긴 한데 어떻게 할 지 모르겠네
        //현재 인덱스까지 켜진 전구의 갯수? xxxxxxxx

        //dp 적용하려면 일단 한 방향으로만 나아가는 방식으로 계산되고 표가 채워져야 하는데..

        //아니면....
        //그리디가 먹히려나??
        solve();
    }

    private static void solve() throws IOException{

        st = new StringTokenizer(br.readLine());
        int n= Integer.parseInt(st.nextToken());
        int k =Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        int[] arr = new int[n];
        for(int i=0;i<n;i++) arr[i] = Integer.parseInt(st.nextToken());

        int cnt=0;

        for(int i=0;i<=n-k;i++){
            if(arr[i]==0) continue;

            cnt++;
            for(int j=0;j<k;j++){
                arr[i+j]^=1;
            }
        }

        for(int i=0;i<n;i++){
            if(arr[i]!=0) {
                System.out.println("Insomnia");
                return ;
            }
        }

        System.out.println(cnt);

    }
}
